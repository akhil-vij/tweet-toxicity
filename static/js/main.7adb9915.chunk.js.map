{"version":3,"sources":["components/TweetTable.js","App.js","serviceWorker.js","index.js"],"names":["columns","id","label","minWidth","width","format","value","toLocaleString","useStyles","makeStyles","root","tableWrapper","maxHeight","overflow","TweetTable","props","classes","React","useState","page","setPage","rowsPerPage","setRowsPerPage","rows","tweets","Paper","className","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","key","align","style","TableBody","slice","row","hover","role","tabIndex","code","TablePagination","rowsPerPageOptions","component","count","length","onChangePage","event","newPage","onChangeRowsPerPage","target","dummyData","text","identity_attack","insult","obscene","severe_toxicity","sexual_explicit","threat","toxicity","App","state","handleEnter","bind","handleClear","handleFetch","handlePopulate","model","this","classify","d","results","setState","prevState","tweet","counter","newTweet","match","fetch","then","res","json","data","a","statuses","push","keyCode","textValue","TextField","disabled","defaultValue","fullWidth","multiline","margin","variant","Button","color","onClick","onChange","handleChange","onKeyDown","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7adb9915.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nconst columns = [\n  { id: \"text\", label: \"Tweet\", minWidth: 500, width: 500 },\n  {\n    id: \"identity_attack\",\n    label: \"Identity Attack\",\n    width: 70,\n    format: value => value.toLocaleString()\n  },\n  {\n    id: \"insult\",\n    label: \"Insult\",\n    width: 70,\n    format: value => value.toLocaleString()\n  },\n  {\n    id: \"obscene\",\n    label: \"Obscene\",\n    width: 70,\n    format: value => value.toLocaleString()\n  },\n  {\n    id: \"severe_toxicity\",\n    label: \"Severe Toxicity\",\n    width: 70,\n    format: value => value.toLocaleString()\n  },\n  {\n    id: \"sexual_explicit\",\n    label: \"Sexual Explicit\",\n    width: 70,\n    format: value => value.toLocaleString()\n  },\n  {\n    id: \"threat\",\n    label: \"Threat\",\n    width: 70,\n    format: value => value.toLocaleString()\n  },\n  {\n    id: \"toxicity\",\n    label: \"Toxicity\",\n    width: 70,\n    format: value => value.toLocaleString()\n  }\n];\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\"\n  },\n  tableWrapper: {\n    maxHeight: 440,\n    overflow: \"auto\"\n  }\n});\n\nexport function TweetTable(props) {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const rows = props.tweets || [];\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{\n                    minWidth: column.minWidth,\n                    width: column.width\n                  }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map(row => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                    {columns.map(column => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell\n                          key={column.id}\n                          align={column.align}\n                          className={value === \"TRUE\" ? \"red\" : \"green\"}\n                        >\n                          {column.format && typeof value === \"number\"\n                            ? column.format(value)\n                            : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </div>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport { TweetTable } from \"./components/TweetTable.js\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\nimport * as toxicity from \"@tensorflow-models/toxicity\";\n\nimport \"./App.css\";\n\nlet dummyData = [\n  {\n    text:\n      \"I will kill your entire family if you do not give me $100000 as ransom amount.\",\n    identity_attack: \"-\",\n    insult: \"-\",\n    obscene: \"-\",\n    severe_toxicity: \"-\",\n    sexual_explicit: \"-\",\n    threat: \"-\",\n    toxicity: \"-\"\n  },\n  {\n    text:\n      \"You are writing stupid comments from your room hidden behind your screen. You are quite astonishingly stupid.\",\n    identity_attack: \"-\",\n    insult: \"-\",\n    obscene: \"-\",\n    severe_toxicity: \"-\",\n    sexual_explicit: \"-\",\n    threat: \"-\",\n    toxicity: \"-\"\n  },\n  {\n    text: \"What a lovely and bright day. Sun is shining in the clear sky :)\",\n    identity_attack: \"-\",\n    insult: \"-\",\n    obscene: \"-\",\n    severe_toxicity: \"-\",\n    sexual_explicit: \"-\",\n    threat: \"-\",\n    toxicity: \"-\"\n  },\n  {\n    text:\n      \"What a lovely and bright day. Sun is shining in the clear sky :). Perfect day for murdering trolls like you.\",\n    identity_attack: \"-\",\n    insult: \"-\",\n    obscene: \"-\",\n    severe_toxicity: \"-\",\n    sexual_explicit: \"-\",\n    threat: \"-\",\n    toxicity: \"-\"\n  },\n  {\n    text: \"You are a racist moron.\",\n    identity_attack: \"-\",\n    insult: \"-\",\n    obscene: \"-\",\n    severe_toxicity: \"-\",\n    sexual_explicit: \"-\",\n    threat: \"-\",\n    toxicity: \"-\"\n  },\n  {\n    text:\n      \"RT @p_r_k_d_l: this is a stupid idea but i have to get this out of my system https://t.co/6H5BtRh8rL\",\n    identity_attack: \"-\",\n    insult: \"-\",\n    obscene: \"-\",\n    severe_toxicity: \"-\",\n    sexual_explicit: \"-\",\n    threat: \"-\",\n    toxicity: \"-\"\n  }\n];\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: dummyData\n    };\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleFetch = this.handleFetch.bind(this);\n    this.handlePopulate = this.handlePopulate.bind(this);\n    this.model = null;\n  }\n\n  async componentDidMount() {\n    // Flow for the initial load\n    // Load the model\n    this.model = await toxicity.load(0.5);\n    const results = await this.model.classify(\n      this.state.tweets.map(d => d.text)\n    );\n\n    // Once you have the results, need to update the state\n    this.setState(prevState => {\n      return {\n        tweets: prevState.tweets.map((tweet, counter) => {\n          // Going through each column for each tweet\n          let newTweet = {};\n          newTweet.text = tweet.text;\n          newTweet[\"identity_attack\"] = results[0].results[counter].match\n            ? \"TRUE\"\n            : \"-\";\n          newTweet[\"insult\"] = results[1].results[counter].match ? \"TRUE\" : \"-\";\n          newTweet[\"obscene\"] = results[2].results[counter].match\n            ? \"TRUE\"\n            : \"-\";\n          newTweet[\"severe_toxicity\"] = results[3].results[counter].match\n            ? \"TRUE\"\n            : \"-\";\n          newTweet[\"sexual_explicit\"] = results[4].results[counter].match\n            ? \"TRUE\"\n            : \"-\";\n          newTweet[\"threat\"] = results[5].results[counter].match ? \"TRUE\" : \"-\";\n          newTweet[\"toxicity\"] = results[6].results[counter].match\n            ? \"TRUE\"\n            : \"-\";\n          return newTweet;\n        })\n      };\n    });\n  }\n\n  handleClear() {\n    this.setState({\n      tweets: []\n    });\n  }\n\n  async handlePopulate() {\n    this.handleClear();\n    const results = await this.model.classify(dummyData.map(d => d.text));\n    this.setState(prevState => {\n      return {\n        tweets: dummyData.map((tweet, counter) => {\n          // Going through each column for each tweet\n          let newTweet = {};\n          newTweet.text = tweet.text;\n          newTweet[\"identity_attack\"] = results[0].results[counter].match\n            ? \"TRUE\"\n            : \"-\";\n          newTweet[\"insult\"] = results[1].results[counter].match ? \"TRUE\" : \"-\";\n          newTweet[\"obscene\"] = results[2].results[counter].match\n            ? \"TRUE\"\n            : \"-\";\n          newTweet[\"severe_toxicity\"] = results[3].results[counter].match\n            ? \"TRUE\"\n            : \"-\";\n          newTweet[\"sexual_explicit\"] = results[4].results[counter].match\n            ? \"TRUE\"\n            : \"-\";\n          newTweet[\"threat\"] = results[5].results[counter].match ? \"TRUE\" : \"-\";\n          newTweet[\"toxicity\"] = results[6].results[counter].match\n            ? \"TRUE\"\n            : \"-\";\n          return newTweet;\n        })\n      };\n    });\n  }\n\n  handleFetch() {\n    this.handleClear();\n    fetch(\"/search\")\n      .then(res => {\n        return res.json();\n      })\n      .then(async data => {\n        if (data) {\n          let results = [];\n          if (data.statuses && data.statuses.length) {\n            results = await this.model.classify(data.statuses.map(d => d.text));\n          } else {\n            data.statuses = [];\n            data.statuses.push(dummyData[5]);\n            results = await this.model.classify(data.statuses.map(d => d.text));\n          }\n\n          this.setState(prevState => {\n            return {\n              tweets: data.statuses.map((tweet, counter) => {\n                // Going through each column for each tweet\n                let newTweet = {};\n                newTweet.text = tweet.text;\n                newTweet[\"identity_attack\"] = results[0].results[counter].match\n                  ? \"TRUE\"\n                  : \"-\";\n                newTweet[\"insult\"] = results[1].results[counter].match\n                  ? \"TRUE\"\n                  : \"-\";\n                newTweet[\"obscene\"] = results[2].results[counter].match\n                  ? \"TRUE\"\n                  : \"-\";\n                newTweet[\"severe_toxicity\"] = results[3].results[counter].match\n                  ? \"TRUE\"\n                  : \"-\";\n                newTweet[\"sexual_explicit\"] = results[4].results[counter].match\n                  ? \"TRUE\"\n                  : \"-\";\n                newTweet[\"threat\"] = results[5].results[counter].match\n                  ? \"TRUE\"\n                  : \"-\";\n                newTweet[\"toxicity\"] = results[6].results[counter].match\n                  ? \"TRUE\"\n                  : \"-\";\n                return newTweet;\n              })\n            };\n          });\n        }\n      });\n  }\n\n  async handleEnter(event) {\n    if (event.keyCode === 13) {\n      let textValue = event.target.value;\n      event.target.value = \"\";\n      const results = await this.model.classify(textValue);\n      let newTweet = {};\n      let counter = 0;\n      newTweet.text = textValue;\n      newTweet[\"identity_attack\"] = results[0].results[counter].match\n        ? \"TRUE\"\n        : \"-\";\n      newTweet[\"insult\"] = results[1].results[counter].match ? \"TRUE\" : \"-\";\n      newTweet[\"obscene\"] = results[2].results[counter].match ? \"TRUE\" : \"-\";\n      newTweet[\"severe_toxicity\"] = results[3].results[counter].match\n        ? \"TRUE\"\n        : \"-\";\n      newTweet[\"sexual_explicit\"] = results[4].results[counter].match\n        ? \"TRUE\"\n        : \"-\";\n      newTweet[\"threat\"] = results[5].results[counter].match ? \"TRUE\" : \"-\";\n      newTweet[\"toxicity\"] = results[6].results[counter].match ? \"TRUE\" : \"-\";\n      // Need to just append one object to the state\n      this.setState({\n        tweets: [...this.state.tweets, newTweet]\n      });\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <TextField\n          disabled\n          id=\"outlined-disabled\"\n          label=\"Text/Tweet Monitoring Application\"\n          defaultValue=\"This application uses Deep Neural Networks to find out rude/offensive language in texts/tweets. \n          The tensorflow model is loaded when the page loads, so you might have to wait for 4-5 seconds before you see the prediction of the model.\n          The application is seeded with some dummy data, you can clear the dummy data and fetch random tweets from the twitter API.\n          This application can also be used as a real time rude/offensive language detection in tweets. REMEMBER - Please avoid using offensive language in your social media platforms :)\n          \"\n          fullWidth\n          multiline\n          margin=\"normal\"\n          variant=\"outlined\"\n        />\n        <div className=\"button-cont\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={this.handleFetch}\n          >\n            Fetch Random Tweet(s)\n          </Button>\n          <Button onClick={this.handleClear}>Clear Table</Button>\n          <Button onClick={this.handlePopulate}>\n            Populate with Dummy Data\n          </Button>\n        </div>\n        <TweetTable tweets={this.state.tweets} />\n        <div className=\"manual-analysis-cont\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            label=\"Enter any text for Toxicity classification and press Enter\"\n            variant=\"outlined\"\n            onChange={this.handleChange}\n            onKeyDown={this.handleEnter}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}